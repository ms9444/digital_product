# Generated by Django 4.2.6 on 2023-11-20 13:23

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'user with that username already exist'}, help_text='Required. 30 Character or fewer Starting with latter', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z][a-zA-Z0-9_\\.]+$')], verbose_name='user_name')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first_name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last_name')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='email address')),
                ('phone_number', models.BigIntegerField(blank=True, error_messages={'unique': 'user with that phone number already exist'}, null=True, unique=True, validators=[django.core.validators.RegexValidator('^989[0-3,9]\\d{8}S', 'Enter a valid Mobile Number.', 'invalid')], verbose_name='phone number')),
                ('is_staff', models.BooleanField(default=False, help_text='can log to in admin panel', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='user must be active, unselecte this instead deletig accunt', verbose_name='active')),
                ('date_join', models.DateTimeField(default=django.utils.timezone.now, verbose_name='')),
                ('last_seen', models.DateTimeField(null=True, verbose_name='last_seen')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'users',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('is_valid', models.BooleanField(default=True)),
                ('modified_at', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nick_name', models.CharField(blank=True, max_length=150, verbose_name='nick name')),
                ('avatar', models.ImageField(blank=True, upload_to='user/', verbose_name='avatar')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='birthday')),
                ('gender', models.BooleanField(help_text='female is False, male is True, null is unset', verbose_name='gender')),
                ('province', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.province', verbose_name='province')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profile',
                'db_table': 'user_profile',
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_uuid', models.UUIDField(null=True, verbose_name='device uuid')),
                ('notify_token', models.CharField(blank=True, max_length=200, validators=[django.core.validators.RegexValidator('[a-z]|[A-Z]|[0-9]\\w+', 'Notify not valid', 'invalid')], verbose_name='notify token')),
                ('last_user_login', models.DateTimeField(null=True, verbose_name='last user login')),
                ('device_type', models.PositiveSmallIntegerField(choices=[(1, 'web'), (2, 'android'), (3, 'iOS')], default=1, verbose_name='device type')),
                ('device_os', models.CharField(blank=True, max_length=20, verbose_name='device os')),
                ('device_model', models.CharField(blank=True, max_length=50, verbose_name='device model')),
                ('app_version', models.CharField(blank=True, max_length=20, verbose_name='app version')),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'device',
                'verbose_name_plural': 'devices',
                'db_table': 'user device',
                'unique_together': {('user', 'device_uuid')},
            },
        ),
    ]
